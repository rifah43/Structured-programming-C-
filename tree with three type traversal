#include<stdio.h>
#include<string.h>
char tree[100],final_tree[100];
int N=0;
int root()
{
    if(tree[0]!='\0')
    {
        printf("Root has been set previously\n");
    }
    else
    {
        printf("Enter the root\n");
        scanf("%c",&tree[0]);
        N++;
    }
}
int create()
{
    int parent;
    char value;
    printf("Set parent index and left child or enter ! for no value\n");
    scanf("%d %c",&parent,&value);
    setLeft(parent,value);
    printf("Set parent index and right child or enter ! for no value\n");
    scanf("%d %c",&parent,&value);
    setRight(parent,value);
}
void setLeft(int parent,char value)
{
    if(tree[parent]!='\0')
    {
        N++;
        tree[(parent*2)+1]=value;
    }
    else
        printf("Parent is unavailable\n",parent);
}

void setRight(int parent,char value)
{
    if(tree[parent]!='\0')
    {
        N++;
        tree[(parent*2)+2]=value;
    }
    else
        printf("Parent is unavailable\n",parent);
}
int Tree()
{
    int i;
    for(i=0;i<N;i++)
    {
        if(tree[i]=='\0' || tree[i]=='!')
        {
            final_tree[i]='_';
        }
        else
        {
            final_tree[i]= tree[i];
        }
    }
}
int left_value(int value)
{
    return (value*2)+1;
}
int right_value(int value)
{
    return (value*2)+2;
}

void pre_order(int root)
{
    if(final_tree[root]=='\0')
    {
        return ;
    }

    else{
        printf("%c",final_tree[root]);
        printf(" ");
        pre_order(left_value(root));
        printf(" ");
        pre_order(right_value(root));
        printf(" ");

    }


}

void in_order(int root)
{
    if(final_tree[root]=='\0')
        return;
    else
    {
        in_order(left_value(root));
        printf(" ");
        printf("%c",final_tree[root]);
        printf(" ");
        in_order(right_value(root));
        printf(" ");
    }
}

void post_order(int root)
{
       if(final_tree[root]=='\0')
        return;
    else
    {
        post_order(left_value(root));
        printf(" ");
        post_order(right_value(root));
        printf(" ");
        printf("%c",final_tree[root]);
        printf(" ");
    }
}
void display()
{
    int rt=0;
    printf("Pre order:\n");
    pre_order(rt);
    rt=0;
    printf("\n\n");
    printf("In order:\n");
    in_order(rt);
    rt=0;
    printf("\n\n");
    printf("Post order:\n");
    post_order(rt);
}
int main()
{
    int i,x,c;
    root();
    for(i=1;i<=100;i++)
    {
        create();
        printf("Enter 1 to continue and -1 to break\n");
        scanf("%d",&c);
        if(c==-1)
        {
            break;
        }
    }
    Tree();
    display();
}
