#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include<math.h>

int i=0,j=0;
int infix[1000];

struct stack
{
    int size,top;
    int *array;
};


int is_empty(struct stack *s)
{
    if(s->top == -1)
        return 1;
    else
        return 0;

}//to check before popping if it is empty or not


int is_full(struct stack *s)
{
    if(s->top == s->size-1)
        return 1;
    else
        return 0;

}//to check before pushing if it is full or not

void push(struct stack *s,int value)
{
    if(is_full(s))
    {
        printf("Stack overflow\n");
    }
    else
    {
        s->top++;//if stack is not full moving top to input
        s->array[s->top] = value;//assigning value on top
    }
}

int pop(struct stack *s)
{
    if(is_empty(s))
    {
        printf("Stack is empty\n");
        return -1;
    }
    else//if stack is not empty
    {
        int value=0;
        value = s->array[s->top];//assigning the value from top
        s->top--;//shifting the top location
        return value;
    }

}

char top(struct stack *s)
{
    return s->array[s->top];
}//determining the top of stack


int precedence(char value)
{
    if(value == '^')
        return 3;
    else if(value == '/'  || value == '%' || value == '*')
        return 2;
    else if(value == '+' || value == '-')
        return 1;
    else
        return 0;
}//determining the precedence of operators


int is_operator(char value)
{
    if(value == '*' || value == '/' || value == '+' || value == '-' || value == '^')
        return 1;
    else
        return 0;
}//determining if it infix[i] is an operator or not


char *Final(char *infix)
{
    struct stack *s = (struct stack*)malloc(sizeof(struct stack));;//allocating memory space for struct stack
    s->size = 100;
    s->top = -1;//as memory allocation will be from 0
    s->array = (char*)malloc(s->size*sizeof(char));//allocating memory space for array

    char *postfix = (char*)malloc(sizeof(char) * strlen(infix+1) * 2); //memory allocation for postfix equal to the size of infix

    while(infix[i]!= NULL)//loop will run until infix[i] is null
    {
        if(infix[i]=='(')
        {
            push(s,infix[i]-48);
            i++;
        }
        else if(infix[i]==')')
        {
            int k=i-1;
            while(top(s)!='(')
            {

                if(is_operator(infix[k]))//if infix[i] is an operator
                {
                    if(precedence(infix[k])> precedence(top(s)))//if infix[i] is greater than the previous operator stored in top
                    {
                        push(s,infix[k]-48);//pushing operator in stack
                        k--;
                    }
                    else//if infix[i] is smaller than the previous operator stored in top
                    {
                        postfix[j] = pop(s)+48;//pop the operator into postfix
                        j++;
                        if(is_operator(infix[i]))//if the next index of infix is operator
                            {
                                postfix[j] = ' ';
                                j++;//then we will print ',' to differentiate
                            }
                    }
                }
                else
                    {
                        k--;
                    }
            }
            i++;
            pop(s);
        }
        else if(!is_operator(infix[i]))//if infix[i] is not an operator
        {
            postfix[j]=infix[i];
            i++;
            j++;
            if(is_operator(infix[i]))
            {
            postfix[j] = ' ';
            j++;
            }
        }
        else//if infix[i] is an operator
        {
            if(precedence(infix[i])> precedence(top(s)))//if infix[i] is greater than the previous operator stored in top
            {
                push(s,infix[i]-48);//pushing operator in stack
                i++;
            }
            else//if infix[i] is smaller than the previous operator stored in top
            {
                postfix[j] = pop(s)+48;//will pop the operator into
                j++;
                if(is_operator(infix[i]))
            {
            postfix[j] = ' ';
            j++;
            }
            }
        }
    }

     while(!is_empty(s))
    {
        postfix[j] = pop(s)+48;
        j++;
        if(is_operator(infix[i]))
            {
            postfix[j] = ' ';
            j++;
            }
    }
    postfix[j] = NULL;
    return postfix;
}

int rev(int a)
{
    int rev=0,rem;
    while(a!=0)
    {
        rem=a%10;
        rev=rev*10+rem;
        a=a/10;
    }
    return rev;
}

int evaluate(char *postfix)
{
    struct stack *s = (struct stack*)malloc(sizeof(struct stack));;//allocating memory space for struct stack
    s->size = 100;
    s->top = -1;//as memory allocation will be from 0
    s->array = (int*)malloc(s->size*sizeof(int));//allocating memory space for array
    i=0;
    int n1,n2,r=0,num=0,k;
    while(postfix[i]!=NULL)
    {
        if(postfix[i]== ' ')
            {continue;}
        else if(!is_operator(postfix[i]))
        {
            num=0;
            k=1;
            while(postfix[i]!=' ')
            {
                push(s,postfix[i]-48);
                n1=pop(s);
                num=num+k*n1;
                k=k*10;
            }
            n1=rev(num);
            push(s,n1);
        }
        else
            {
                n1=pop(s);
                n2=pop(s);
                if(postfix[i]=='+')
                    {
                        r=n2+n1;
                    }
                if(postfix[i]=='-')
                    {
                        r=n2-n1;
                    }
                if(postfix[i]=='*')
                    {
                        r=n2*n1;
                    }
                if(postfix[i]=='/')
                    {
                        r=n2/n1;
                    }
                if(postfix[i]=='%')
                    {
                        r=n2%n1;
                    }
                if(postfix[i]=='^')
                    {
                        r=pow(n2,n1);
                    }
                push(s,r);
            }
            i++;

    }
        return r;
    }


int main(void)
{
    int a;
    scanf("%s",&*infix);
    printf("%s\n",Final(infix));
    a=evaluate(Final(infix));
    printf("Result %d\n",a);
    return 0;
}
